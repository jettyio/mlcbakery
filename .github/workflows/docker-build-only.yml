name: Build and Deploy MCP Server to Cloud Run

on:
  push:
    branches: [ main ] # Trigger on push to the main branch
  workflow_dispatch: # Allow manual triggering from the Actions tab

env:
  # Define the image name you want to use locally during the build
  IMAGE_NAME: mlcbakery-unified
  # Use GAR path from secrets
  GAR_IMAGE_PATH: ${{ secrets.GAR_REPOSITORY_PATH }}/mlcbakery-unified

  # --- GCP & Cloud Run Details (Reference Secrets) ---
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
  GCP_WIF_PROVIDER: ${{ secrets.GCP_WIF_PROVIDER }}
  CLOUD_RUN_REGION: ${{ secrets.CLOUD_RUN_REGION }}
  MCP_SERVICE_NAME: ${{ secrets.MCP_SERVER_SERVICE_NAME || 'mcp-server' }} # Default to mcp-server if secret not set

jobs:
  build_push_deploy:
    name: Build, Push to GAR and Deploy MCP Server
    runs-on: ubuntu-latest
    permissions:
      contents: read      # Read repository content
      id-token: write   # For GCP auth. No 'packages: write' needed for GAR.

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Authenticate to Google Cloud FIRST
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.GCP_WIF_PROVIDER }}
        service_account: ${{ env.GCP_SA_EMAIL }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Log in to Google Artifact Registry
    - name: Log in to Artifact Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.CLOUD_RUN_REGION }}-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    # Build and push Docker image to GAR
    - name: Build and push Docker image to GAR
      id: build-push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.GAR_IMAGE_PATH }}:${{ github.sha }}
          ${{ env.GAR_IMAGE_PATH }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Create metadata file using GAR image path
    - name: Create Cloud Run metadata file
      id: create-metadata
      run: |
        cat <<EOF > service.yaml
        apiVersion: serving.knative.dev/v1
        kind: Service
        metadata:
          name: ${{ env.MCP_SERVICE_NAME }}
        spec:
          template:
            spec:
              # Service account for Cloud Run revision (optional but recommended)
              # serviceAccountName: your-dedicated-sa@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
              containers:
              - image: ${{ env.GAR_IMAGE_PATH }}:${{ github.sha }} # USE GAR PATH
                command:
                - "python"
                args:
                - "mcp_server/main.py"
                - "--host"
                - "0.0.0.0"
                - "--port"
                - "8080"
        EOF
        echo "Created service.yaml"

    - name: Deploy MCP Server to Cloud Run
      id: deploy-mcp
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        # Note: 'image' input is ignored when 'metadata' is provided
        metadata: ./service.yaml
        service: ${{ env.MCP_SERVICE_NAME }} # Still needed to target the correct service
        region: ${{ env.CLOUD_RUN_REGION }}
        env_vars: |
          PYTHONPATH=/app
          MLCBAKERY_API_BASE_URL=${{ secrets.API_SERVICE_URL }}
          MLCBAKERY_HOST=${{ secrets.MLCBAKERY_HOST }}
          # Add other necessary env vars here

    - name: Output Cloud Run Service URL
      run: echo "MCP Server Deployed - ${{ steps.deploy-mcp.outputs.url }}"