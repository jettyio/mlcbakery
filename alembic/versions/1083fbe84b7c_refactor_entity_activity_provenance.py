"""refactor_entity_activity_provenance

Revision ID: 1083fbe84b7c
Revises: 2722da380e4c
Create Date: 2025-05-13 14:48:39.724948

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1083fbe84b7c'
down_revision: Union[str, None] = '2722da380e4c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Create entity_relationships table and its indexes
    op.create_table('entity_relationships',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('source_entity_id', sa.Integer(), nullable=True),
    sa.Column('target_entity_id', sa.Integer(), nullable=True),
    sa.Column('activity_id', sa.Integer(), nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['activity_id'], ['activities.id'], ),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ),
    sa.ForeignKeyConstraint(['source_entity_id'], ['entities.id'], ),
    sa.ForeignKeyConstraint(['target_entity_id'], ['entities.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_entity_relationships_activity_id'), 'entity_relationships', ['activity_id'], unique=False)
    op.create_index(op.f('ix_entity_relationships_agent_id'), 'entity_relationships', ['agent_id'], unique=False)
    op.create_index(op.f('ix_entity_relationships_id'), 'entity_relationships', ['id'], unique=False)
    op.create_index(op.f('ix_entity_relationships_source_entity_id'), 'entity_relationships', ['source_entity_id'], unique=False)
    op.create_index(op.f('ix_entity_relationships_target_entity_id'), 'entity_relationships', ['target_entity_id'], unique=False)

    # 2. Data Migration Logic
    conn = op.get_bind()

    # Define table stubs for querying old schema
    activities_old_table = sa.Table(
        'activities',
        sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('output_entity_id', sa.Integer) 
    )

    activity_entities_old_table = sa.Table(
        'activity_entities',
        sa.MetaData(),
        sa.Column('activity_id', sa.Integer, primary_key=True),
        sa.Column('entity_id', sa.Integer, primary_key=True)
    )

    was_associated_with_old_table = sa.Table(
        'was_associated_with',
        sa.MetaData(),
        sa.Column('activity_id', sa.Integer, primary_key=True),
        sa.Column('agent_id', sa.Integer, primary_key=True)
    )

    # Define table stub for the new table (for bulk_insert)
    entity_relationships_insert_table = sa.Table(
        'entity_relationships',
        sa.MetaData(),
        # sa.Column('id', sa.Integer, primary_key=True), # ID will be auto-generated by DB
        sa.Column('source_entity_id', sa.Integer),
        sa.Column('target_entity_id', sa.Integer),
        sa.Column('activity_id', sa.Integer),
        sa.Column('agent_id', sa.Integer)
    )

    activities_data = conn.execute(sa.select(activities_old_table.c.id, activities_old_table.c.output_entity_id)).fetchall()
    all_new_relationships = []

    for activity_row in activities_data:
        current_activity_id = activity_row.id
        current_output_entity_id = activity_row.output_entity_id

        input_entities_rows = conn.execute(
            sa.select(activity_entities_old_table.c.entity_id)
            .where(activity_entities_old_table.c.activity_id == current_activity_id)
        ).fetchall()

        agent_row = conn.execute(
            sa.select(was_associated_with_old_table.c.agent_id)
            .where(was_associated_with_old_table.c.activity_id == current_activity_id)
            .limit(1)
        ).first()
        current_agent_id = agent_row.agent_id if agent_row else None

        if input_entities_rows:
            for input_entity_row in input_entities_rows:
                all_new_relationships.append({
                    'source_entity_id': input_entity_row.entity_id,
                    'target_entity_id': current_output_entity_id,
                    'activity_id': current_activity_id,
                    'agent_id': current_agent_id
                })
        elif current_output_entity_id is not None:
            all_new_relationships.append({
                'source_entity_id': None,
                'target_entity_id': current_output_entity_id,
                'activity_id': current_activity_id,
                'agent_id': current_agent_id
            })

    if all_new_relationships:
        op.bulk_insert(entity_relationships_insert_table, all_new_relationships)

    # 3. Drop old tables and columns
    op.drop_constraint('activities_output_entity_id_fkey', 'activities', type_='foreignkey')
    op.drop_column('activities', 'output_entity_id')
    op.drop_table('was_associated_with')
    op.drop_table('activity_entities')
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Recreate activity_entities table
    op.create_table('activity_entities',
    sa.Column('activity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['activities.id'], name='activity_entities_activity_id_fkey'),
    sa.ForeignKeyConstraint(['entity_id'], ['entities.id'], name='activity_entities_entity_id_fkey'),
    sa.PrimaryKeyConstraint('activity_id', 'entity_id', name='activity_entities_pkey')
    )

    # Recreate was_associated_with table
    op.create_table('was_associated_with',
    sa.Column('activity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['activities.id'], name='was_associated_with_activity_id_fkey'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], name='was_associated_with_agent_id_fkey'),
    sa.PrimaryKeyConstraint('activity_id', 'agent_id', name='was_associated_with_pkey')
    )

    # Add output_entity_id back to activities table
    op.add_column('activities', sa.Column('output_entity_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('activities_output_entity_id_fkey', 'activities', 'entities', ['output_entity_id'], ['id']) # Name might vary

    # Drop entity_relationships table
    op.drop_index(op.f('ix_entity_relationships_target_entity_id'), table_name='entity_relationships')
    op.drop_index(op.f('ix_entity_relationships_source_entity_id'), table_name='entity_relationships')
    op.drop_index(op.f('ix_entity_relationships_id'), table_name='entity_relationships')
    op.drop_index(op.f('ix_entity_relationships_agent_id'), table_name='entity_relationships')
    op.drop_index(op.f('ix_entity_relationships_activity_id'), table_name='entity_relationships')
    op.drop_table('entity_relationships')
    
    # ### end Alembic commands ###
